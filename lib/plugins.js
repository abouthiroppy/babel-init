'use strict';

const inquirer = require('inquirer');

const transformPlugins = [
  new inquirer.Separator('= transform'),
  new inquirer.Separator('=== es3'),
  'es3-member-expression-literals',
  'es3-property-literals',
  new inquirer.Separator('=== es5'),
  'es5-property-mutators',
  new inquirer.Separator('=== es2015'),
  'es2015-arrow-functions',
  'es2015-block-scoped-functions',
  'es2015-block-scoping',
  'es2015-classes',
  'es2015-computed-properties',
  'es2015-constants',
  'es2015-destructuring',
  'es2015-duplicate-keys',
  'es2015-for-of',
  'es2015-function-name',
  'es2015-literals',
  'es2015-object-super',
  'es2015-parameters',
  'es2015-shorthand-properties',
  'es2015-spread',
  'es2015-sticky-regex',
  'es2015-template-literals',
  'es2015-typeof-symbol',
  'es2015-unicode-regex',
  new inquirer.Separator('=== es2016'),
  'exponentiation-operator',
  new inquirer.Separator('=== es2017'),
  'async-to-generator',
  new inquirer.Separator('=== modules'),
  'es2015-modules-amd',
  'es2015-modules-commonjs',
  'es2015-modules-systemjs',
  'es2015-modules-umd',
  new inquirer.Separator('=== experimental'),
  'async-generator-functions',
  'async-to-module-method',
  'class-properties',
  'decorators',
  'do-expressions',
  'export-extensions',
  'function-bind',
  'object-rest-spread',
  new inquirer.Separator('=== react'),
  'react-constant-elements',
  'react-display-name',
  'react-inline-elements',
  'react-jsx',
  'react-jsx-compat',
  'react-jsx-self',
  'react-jsx-source',
  new inquirer.Separator('=== minification'),
  'inline-environment-variables',
  'inline-consecutive-adds',
  'member-expression-literals',
  'merge-sibling-variables',
  'minify-booleans',
  'minify-constant-folding',
  'minify-dead-code-elimination',
  'minify-empty-function',
  'minify-flip-comparisons',
  'minify-guarded-expressions',
  'minify-infinity',
  'minify-mangle-names',
  'minify-numeric-literals',
  'minify-replace',
  'minify-simplify',
  'minify-type-constructors',
  'node-env-inline',
  'property-literals',
  'regexp-constructors',
  'remove-console',
  'remove-debugger',
  'simplify-comparison-operators',
  'undefined-to-void',
  new inquirer.Separator('=== other'),
  'eval',
  'flow-comments',
  'flow-strip-types',
  'jscript',
  'object-assign',
  'object-set-prototype-of-to-assign',
  'proto-to-assign',
  'regenerator',
  'runtime',
  'strict-mode'
].map((plugin) => typeof plugin === 'string' ? `transform-${plugin}` : plugin);

const syntaxPlugins = [
  new inquirer.Separator('= syntax'),
  'async-generators',
  'class-properties',
  'decorators',
  'do-expressions',
  'dynamic-import',
  'export-extensions',
  'flow',
  'function-bind',
  'function-sent',
  'jsx',
  'object-rest-spread'
].map((plugin) => typeof plugin === 'string' ? `syntax-${plugin}` : plugin);

const plugins = [...transformPlugins, ...syntaxPlugins];

module.exports = plugins;
